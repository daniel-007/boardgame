/************************************
 *
 * This file contains auto-generated methods to help certain structs
 * implement boardgame.SubState and boardgame.MutableSubState. It was
 * generated by autoreader.
 *
 * DO NOT EDIT by hand.
 *
 ************************************/
package examplepkg

import (
	"errors"
	"github.com/jkomoros/boardgame"
)

// Implementation for myStruct

var __myStructReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyBool":       boardgame.TypeBool,
	"MyInt":        boardgame.TypeInt,
	"MySizedStack": boardgame.TypeSizedStack,
	"TheTimer":     boardgame.TypeTimer,
}

type __myStructReader struct {
	data *myStruct
}

func (m *__myStructReader) Props() map[string]boardgame.PropertyType {
	return __myStructReaderProps
}

func (m *__myStructReader) Prop(name string) (interface{}, error) {
	props := m.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeInt:
		return m.IntProp(name)
	case boardgame.TypeBool:
		return m.BoolProp(name)
	case boardgame.TypeString:
		return m.StringProp(name)
	case boardgame.TypePlayerIndex:
		return m.PlayerIndexProp(name)
	case boardgame.TypeGrowableStack:
		return m.GrowableStackProp(name)
	case boardgame.TypeSizedStack:
		return m.SizedStackProp(name)
	case boardgame.TypeTimer:
		return m.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType)
}

func (m *__myStructReader) IntProp(name string) (int, error) {

	switch name {
	case "MyInt":
		return m.data.MyInt, nil

	}

	return 0, errors.New("No such int prop: " + name)

}

func (m *__myStructReader) BoolProp(name string) (bool, error) {

	switch name {
	case "MyBool":
		return m.data.MyBool, nil

	}

	return false, errors.New("No such int prop: " + name)

}

func (m *__myStructReader) StringProp(name string) (string, error) {

	return "", errors.New("No such int prop: " + name)

}

func (m *__myStructReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	return 0, errors.New("No such int prop: " + name)

}

func (m *__myStructReader) GrowableStackProp(name string) (*boardgame.GrowableStack, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (m *__myStructReader) SizedStackProp(name string) (*boardgame.SizedStack, error) {

	switch name {
	case "MySizedStack":
		return m.data.MySizedStack, nil

	}

	return nil, errors.New("No such int prop: " + name)

}

func (m *__myStructReader) TimerProp(name string) (*boardgame.Timer, error) {

	switch name {
	case "TheTimer":
		return m.data.TheTimer, nil

	}

	return nil, errors.New("No such int prop: " + name)

}

func (m *myStruct) Reader() boardgame.PropertyReader {
	return boardgame.DefaultReader(m)
}

func (m *myStruct) ReadSetter() boardgame.PropertyReadSetter {
	return boardgame.DefaultReadSetter(m)
}

// Implementation for myOtherStruct

var __myOtherStructReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyGrowableStack": boardgame.TypeGrowableStack,
	"ThePlayerIndex":  boardgame.TypePlayerIndex,
}

type __myOtherStructReader struct {
	data *myOtherStruct
}

func (m *__myOtherStructReader) Props() map[string]boardgame.PropertyType {
	return __myOtherStructReaderProps
}

func (m *__myOtherStructReader) Prop(name string) (interface{}, error) {
	props := m.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeInt:
		return m.IntProp(name)
	case boardgame.TypeBool:
		return m.BoolProp(name)
	case boardgame.TypeString:
		return m.StringProp(name)
	case boardgame.TypePlayerIndex:
		return m.PlayerIndexProp(name)
	case boardgame.TypeGrowableStack:
		return m.GrowableStackProp(name)
	case boardgame.TypeSizedStack:
		return m.SizedStackProp(name)
	case boardgame.TypeTimer:
		return m.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType)
}

func (m *__myOtherStructReader) IntProp(name string) (int, error) {

	return 0, errors.New("No such int prop: " + name)

}

func (m *__myOtherStructReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such int prop: " + name)

}

func (m *__myOtherStructReader) StringProp(name string) (string, error) {

	return "", errors.New("No such int prop: " + name)

}

func (m *__myOtherStructReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	switch name {
	case "ThePlayerIndex":
		return m.data.ThePlayerIndex, nil

	}

	return 0, errors.New("No such int prop: " + name)

}

func (m *__myOtherStructReader) GrowableStackProp(name string) (*boardgame.GrowableStack, error) {

	switch name {
	case "MyGrowableStack":
		return m.data.MyGrowableStack, nil

	}

	return nil, errors.New("No such int prop: " + name)

}

func (m *__myOtherStructReader) SizedStackProp(name string) (*boardgame.SizedStack, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (m *__myOtherStructReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (m *myOtherStruct) Reader() boardgame.PropertyReader {
	return boardgame.DefaultReader(m)
}

func (m *myOtherStruct) ReadSetter() boardgame.PropertyReadSetter {
	return boardgame.DefaultReadSetter(m)
}

// Implementation for onlyReader

var __onlyReaderReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyString": boardgame.TypeString,
}

type __onlyReaderReader struct {
	data *onlyReader
}

func (o *__onlyReaderReader) Props() map[string]boardgame.PropertyType {
	return __onlyReaderReaderProps
}

func (o *__onlyReaderReader) Prop(name string) (interface{}, error) {
	props := o.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeInt:
		return o.IntProp(name)
	case boardgame.TypeBool:
		return o.BoolProp(name)
	case boardgame.TypeString:
		return o.StringProp(name)
	case boardgame.TypePlayerIndex:
		return o.PlayerIndexProp(name)
	case boardgame.TypeGrowableStack:
		return o.GrowableStackProp(name)
	case boardgame.TypeSizedStack:
		return o.SizedStackProp(name)
	case boardgame.TypeTimer:
		return o.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType)
}

func (o *__onlyReaderReader) IntProp(name string) (int, error) {

	return 0, errors.New("No such int prop: " + name)

}

func (o *__onlyReaderReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such int prop: " + name)

}

func (o *__onlyReaderReader) StringProp(name string) (string, error) {

	switch name {
	case "MyString":
		return m.data.MyString, nil

	}

	return "", errors.New("No such int prop: " + name)

}

func (o *__onlyReaderReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	return 0, errors.New("No such int prop: " + name)

}

func (o *__onlyReaderReader) GrowableStackProp(name string) (*boardgame.GrowableStack, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (o *__onlyReaderReader) SizedStackProp(name string) (*boardgame.SizedStack, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (o *__onlyReaderReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (o *onlyReader) Reader() boardgame.PropertyReader {
	return boardgame.DefaultReader(o)
}

// Implementation for onlyReadSetter

var __onlyReadSetterReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyInt": boardgame.TypeInt,
}

type __onlyReadSetterReader struct {
	data *onlyReadSetter
}

func (o *__onlyReadSetterReader) Props() map[string]boardgame.PropertyType {
	return __onlyReadSetterReaderProps
}

func (o *__onlyReadSetterReader) Prop(name string) (interface{}, error) {
	props := o.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeInt:
		return o.IntProp(name)
	case boardgame.TypeBool:
		return o.BoolProp(name)
	case boardgame.TypeString:
		return o.StringProp(name)
	case boardgame.TypePlayerIndex:
		return o.PlayerIndexProp(name)
	case boardgame.TypeGrowableStack:
		return o.GrowableStackProp(name)
	case boardgame.TypeSizedStack:
		return o.SizedStackProp(name)
	case boardgame.TypeTimer:
		return o.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType)
}

func (o *__onlyReadSetterReader) IntProp(name string) (int, error) {

	switch name {
	case "MyInt":
		return m.data.MyInt, nil

	}

	return 0, errors.New("No such int prop: " + name)

}

func (o *__onlyReadSetterReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such int prop: " + name)

}

func (o *__onlyReadSetterReader) StringProp(name string) (string, error) {

	return "", errors.New("No such int prop: " + name)

}

func (o *__onlyReadSetterReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	return 0, errors.New("No such int prop: " + name)

}

func (o *__onlyReadSetterReader) GrowableStackProp(name string) (*boardgame.GrowableStack, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (o *__onlyReadSetterReader) SizedStackProp(name string) (*boardgame.SizedStack, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (o *__onlyReadSetterReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such int prop: " + name)

}

func (o *onlyReadSetter) ReadSetter() boardgame.PropertyReadSetter {
	return boardgame.DefaultReadSetter(o)
}

