/************************************
 *
 * This file contains auto-generated methods to help certain structs
 * implement boardgame.SubState and boardgame.MutableSubState. It was
 * generated by autoreader.
 *
 * DO NOT EDIT by hand.
 *
 ************************************/

package examplepkg

import (
	"errors"
	"github.com/jkomoros/boardgame"
	"github.com/jkomoros/boardgame/enum"
)

// Implementation for myStruct

var __myStructReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"EnumConst":          boardgame.TypeEnumConst,
	"EnumVar":            boardgame.TypeEnumVar,
	"MyBool":             boardgame.TypeBool,
	"MyBoolSlice":        boardgame.TypeBoolSlice,
	"MyInt":              boardgame.TypeInt,
	"MyIntSlice":         boardgame.TypeIntSlice,
	"MyPlayerIndexSlice": boardgame.TypePlayerIndexSlice,
	"MySizedStack":       boardgame.TypeStack,
	"MyStringSlice":      boardgame.TypeStringSlice,
	"TheTimer":           boardgame.TypeTimer,
}

type __myStructReader struct {
	data *myStruct
}

func (m *__myStructReader) Props() map[string]boardgame.PropertyType {
	return __myStructReaderProps
}

func (m *__myStructReader) Prop(name string) (interface{}, error) {
	props := m.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		return m.BoolProp(name)
	case boardgame.TypeBoolSlice:
		return m.BoolSliceProp(name)
	case boardgame.TypeEnumConst:
		return m.EnumConstProp(name)
	case boardgame.TypeEnumVar:
		return m.EnumVarProp(name)
	case boardgame.TypeInt:
		return m.IntProp(name)
	case boardgame.TypeIntSlice:
		return m.IntSliceProp(name)
	case boardgame.TypePlayerIndex:
		return m.PlayerIndexProp(name)
	case boardgame.TypePlayerIndexSlice:
		return m.PlayerIndexSliceProp(name)
	case boardgame.TypeStack:
		return m.StackProp(name)
	case boardgame.TypeString:
		return m.StringProp(name)
	case boardgame.TypeStringSlice:
		return m.StringSliceProp(name)
	case boardgame.TypeTimer:
		return m.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType.String())
}

func (m *__myStructReader) SetProp(name string, value interface{}) error {
	props := m.Props()
	propType, ok := props[name]

	if !ok {
		return errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		val, ok := value.(bool)
		if !ok {
			return errors.New("Provided value was not of type bool")
		}
		return m.SetBoolProp(name, val)
	case boardgame.TypeBoolSlice:
		val, ok := value.([]bool)
		if !ok {
			return errors.New("Provided value was not of type []bool")
		}
		return m.SetBoolSliceProp(name, val)
	case boardgame.TypeEnumConst:
		val, ok := value.(enum.Const)
		if !ok {
			return errors.New("Provided value was not of type enum.Const")
		}
		return m.SetEnumConstProp(name, val)
	case boardgame.TypeEnumVar:
		val, ok := value.(enum.Var)
		if !ok {
			return errors.New("Provided value was not of type enum.Var")
		}
		return m.SetEnumVarProp(name, val)
	case boardgame.TypeInt:
		val, ok := value.(int)
		if !ok {
			return errors.New("Provided value was not of type int")
		}
		return m.SetIntProp(name, val)
	case boardgame.TypeIntSlice:
		val, ok := value.([]int)
		if !ok {
			return errors.New("Provided value was not of type []int")
		}
		return m.SetIntSliceProp(name, val)
	case boardgame.TypePlayerIndex:
		val, ok := value.(boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type boardgame.PlayerIndex")
		}
		return m.SetPlayerIndexProp(name, val)
	case boardgame.TypePlayerIndexSlice:
		val, ok := value.([]boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type []boardgame.PlayerIndex")
		}
		return m.SetPlayerIndexSliceProp(name, val)
	case boardgame.TypeStack:
		val, ok := value.(boardgame.Stack)
		if !ok {
			return errors.New("Provided value was not of type boardgame.Stack")
		}
		return m.SetStackProp(name, val)
	case boardgame.TypeString:
		val, ok := value.(string)
		if !ok {
			return errors.New("Provided value was not of type string")
		}
		return m.SetStringProp(name, val)
	case boardgame.TypeStringSlice:
		val, ok := value.([]string)
		if !ok {
			return errors.New("Provided value was not of type []string")
		}
		return m.SetStringSliceProp(name, val)
	case boardgame.TypeTimer:
		val, ok := value.(*boardgame.Timer)
		if !ok {
			return errors.New("Provided value was not of type *boardgame.Timer")
		}
		return m.SetTimerProp(name, val)

	}

	return errors.New("Unexpected property type: " + propType.String())
}

func (m *__myStructReader) BoolProp(name string) (bool, error) {

	switch name {
	case "MyBool":
		return m.data.MyBool, nil

	}

	return false, errors.New("No such Bool prop: " + name)

}

func (m *__myStructReader) SetBoolProp(name string, value bool) error {

	switch name {
	case "MyBool":
		m.data.MyBool = value
		return nil

	}

	return errors.New("No such Bool prop: " + name)

}

func (m *__myStructReader) BoolSliceProp(name string) ([]bool, error) {

	switch name {
	case "MyBoolSlice":
		return m.data.MyBoolSlice, nil

	}

	return []bool{}, errors.New("No such BoolSlice prop: " + name)

}

func (m *__myStructReader) SetBoolSliceProp(name string, value []bool) error {

	switch name {
	case "MyBoolSlice":
		m.data.MyBoolSlice = value
		return nil

	}

	return errors.New("No such BoolSlice prop: " + name)

}

func (m *__myStructReader) EnumConstProp(name string) (enum.Const, error) {

	switch name {
	case "EnumConst":
		return m.data.EnumConst, nil

	}

	return nil, errors.New("No such EnumConst prop: " + name)

}

func (m *__myStructReader) SetEnumConstProp(name string, value enum.Const) error {

	switch name {
	case "EnumConst":
		m.data.EnumConst = value
		return nil

	}

	return errors.New("No such EnumConst prop: " + name)

}

func (m *__myStructReader) EnumVarProp(name string) (enum.Var, error) {

	switch name {
	case "EnumVar":
		return m.data.EnumVar, nil

	}

	return nil, errors.New("No such EnumVar prop: " + name)

}

func (m *__myStructReader) SetEnumVarProp(name string, value enum.Var) error {

	switch name {
	case "EnumVar":
		m.data.EnumVar = value
		return nil

	}

	return errors.New("No such EnumVar prop: " + name)

}

func (m *__myStructReader) IntProp(name string) (int, error) {

	switch name {
	case "MyInt":
		return m.data.MyInt, nil

	}

	return 0, errors.New("No such Int prop: " + name)

}

func (m *__myStructReader) SetIntProp(name string, value int) error {

	switch name {
	case "MyInt":
		m.data.MyInt = value
		return nil

	}

	return errors.New("No such Int prop: " + name)

}

func (m *__myStructReader) IntSliceProp(name string) ([]int, error) {

	switch name {
	case "MyIntSlice":
		return m.data.MyIntSlice, nil

	}

	return []int{}, errors.New("No such IntSlice prop: " + name)

}

func (m *__myStructReader) SetIntSliceProp(name string, value []int) error {

	switch name {
	case "MyIntSlice":
		m.data.MyIntSlice = value
		return nil

	}

	return errors.New("No such IntSlice prop: " + name)

}

func (m *__myStructReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	return 0, errors.New("No such PlayerIndex prop: " + name)

}

func (m *__myStructReader) SetPlayerIndexProp(name string, value boardgame.PlayerIndex) error {

	return errors.New("No such PlayerIndex prop: " + name)

}

func (m *__myStructReader) PlayerIndexSliceProp(name string) ([]boardgame.PlayerIndex, error) {

	switch name {
	case "MyPlayerIndexSlice":
		return m.data.MyPlayerIndexSlice, nil

	}

	return []boardgame.PlayerIndex{}, errors.New("No such PlayerIndexSlice prop: " + name)

}

func (m *__myStructReader) SetPlayerIndexSliceProp(name string, value []boardgame.PlayerIndex) error {

	switch name {
	case "MyPlayerIndexSlice":
		m.data.MyPlayerIndexSlice = value
		return nil

	}

	return errors.New("No such PlayerIndexSlice prop: " + name)

}

func (m *__myStructReader) StackProp(name string) (boardgame.Stack, error) {

	switch name {
	case "MySizedStack":
		return m.data.MySizedStack, nil

	}

	return nil, errors.New("No such Stack prop: " + name)

}

func (m *__myStructReader) SetStackProp(name string, value boardgame.Stack) error {

	switch name {
	case "MySizedStack":
		m.data.MySizedStack = value
		return nil

	}

	return errors.New("No such Stack prop: " + name)

}

func (m *__myStructReader) StringProp(name string) (string, error) {

	return "", errors.New("No such String prop: " + name)

}

func (m *__myStructReader) SetStringProp(name string, value string) error {

	return errors.New("No such String prop: " + name)

}

func (m *__myStructReader) StringSliceProp(name string) ([]string, error) {

	switch name {
	case "MyStringSlice":
		return m.data.MyStringSlice, nil

	}

	return []string{}, errors.New("No such StringSlice prop: " + name)

}

func (m *__myStructReader) SetStringSliceProp(name string, value []string) error {

	switch name {
	case "MyStringSlice":
		m.data.MyStringSlice = value
		return nil

	}

	return errors.New("No such StringSlice prop: " + name)

}

func (m *__myStructReader) TimerProp(name string) (*boardgame.Timer, error) {

	switch name {
	case "TheTimer":
		return m.data.TheTimer, nil

	}

	return nil, errors.New("No such Timer prop: " + name)

}

func (m *__myStructReader) SetTimerProp(name string, value *boardgame.Timer) error {

	switch name {
	case "TheTimer":
		m.data.TheTimer = value
		return nil

	}

	return errors.New("No such Timer prop: " + name)

}

func (m *myStruct) Reader() boardgame.PropertyReader {
	return &__myStructReader{m}
}

func (m *myStruct) ReadSetter() boardgame.PropertyReadSetter {
	return &__myStructReader{m}
}

// Implementation for embeddedStruct

var __embeddedStructReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyInt":             boardgame.TypeInt,
	"TargetPlayerIndex": boardgame.TypePlayerIndex,
}

type __embeddedStructReader struct {
	data *embeddedStruct
}

func (e *__embeddedStructReader) Props() map[string]boardgame.PropertyType {
	return __embeddedStructReaderProps
}

func (e *__embeddedStructReader) Prop(name string) (interface{}, error) {
	props := e.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		return e.BoolProp(name)
	case boardgame.TypeBoolSlice:
		return e.BoolSliceProp(name)
	case boardgame.TypeEnumConst:
		return e.EnumConstProp(name)
	case boardgame.TypeEnumVar:
		return e.EnumVarProp(name)
	case boardgame.TypeInt:
		return e.IntProp(name)
	case boardgame.TypeIntSlice:
		return e.IntSliceProp(name)
	case boardgame.TypePlayerIndex:
		return e.PlayerIndexProp(name)
	case boardgame.TypePlayerIndexSlice:
		return e.PlayerIndexSliceProp(name)
	case boardgame.TypeStack:
		return e.StackProp(name)
	case boardgame.TypeString:
		return e.StringProp(name)
	case boardgame.TypeStringSlice:
		return e.StringSliceProp(name)
	case boardgame.TypeTimer:
		return e.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType.String())
}

func (e *__embeddedStructReader) SetProp(name string, value interface{}) error {
	props := e.Props()
	propType, ok := props[name]

	if !ok {
		return errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		val, ok := value.(bool)
		if !ok {
			return errors.New("Provided value was not of type bool")
		}
		return e.SetBoolProp(name, val)
	case boardgame.TypeBoolSlice:
		val, ok := value.([]bool)
		if !ok {
			return errors.New("Provided value was not of type []bool")
		}
		return e.SetBoolSliceProp(name, val)
	case boardgame.TypeEnumConst:
		val, ok := value.(enum.Const)
		if !ok {
			return errors.New("Provided value was not of type enum.Const")
		}
		return e.SetEnumConstProp(name, val)
	case boardgame.TypeEnumVar:
		val, ok := value.(enum.Var)
		if !ok {
			return errors.New("Provided value was not of type enum.Var")
		}
		return e.SetEnumVarProp(name, val)
	case boardgame.TypeInt:
		val, ok := value.(int)
		if !ok {
			return errors.New("Provided value was not of type int")
		}
		return e.SetIntProp(name, val)
	case boardgame.TypeIntSlice:
		val, ok := value.([]int)
		if !ok {
			return errors.New("Provided value was not of type []int")
		}
		return e.SetIntSliceProp(name, val)
	case boardgame.TypePlayerIndex:
		val, ok := value.(boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type boardgame.PlayerIndex")
		}
		return e.SetPlayerIndexProp(name, val)
	case boardgame.TypePlayerIndexSlice:
		val, ok := value.([]boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type []boardgame.PlayerIndex")
		}
		return e.SetPlayerIndexSliceProp(name, val)
	case boardgame.TypeStack:
		val, ok := value.(boardgame.Stack)
		if !ok {
			return errors.New("Provided value was not of type boardgame.Stack")
		}
		return e.SetStackProp(name, val)
	case boardgame.TypeString:
		val, ok := value.(string)
		if !ok {
			return errors.New("Provided value was not of type string")
		}
		return e.SetStringProp(name, val)
	case boardgame.TypeStringSlice:
		val, ok := value.([]string)
		if !ok {
			return errors.New("Provided value was not of type []string")
		}
		return e.SetStringSliceProp(name, val)
	case boardgame.TypeTimer:
		val, ok := value.(*boardgame.Timer)
		if !ok {
			return errors.New("Provided value was not of type *boardgame.Timer")
		}
		return e.SetTimerProp(name, val)

	}

	return errors.New("Unexpected property type: " + propType.String())
}

func (e *__embeddedStructReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such Bool prop: " + name)

}

func (e *__embeddedStructReader) SetBoolProp(name string, value bool) error {

	return errors.New("No such Bool prop: " + name)

}

func (e *__embeddedStructReader) BoolSliceProp(name string) ([]bool, error) {

	return []bool{}, errors.New("No such BoolSlice prop: " + name)

}

func (e *__embeddedStructReader) SetBoolSliceProp(name string, value []bool) error {

	return errors.New("No such BoolSlice prop: " + name)

}

func (e *__embeddedStructReader) EnumConstProp(name string) (enum.Const, error) {

	return nil, errors.New("No such EnumConst prop: " + name)

}

func (e *__embeddedStructReader) SetEnumConstProp(name string, value enum.Const) error {

	return errors.New("No such EnumConst prop: " + name)

}

func (e *__embeddedStructReader) EnumVarProp(name string) (enum.Var, error) {

	return nil, errors.New("No such EnumVar prop: " + name)

}

func (e *__embeddedStructReader) SetEnumVarProp(name string, value enum.Var) error {

	return errors.New("No such EnumVar prop: " + name)

}

func (e *__embeddedStructReader) IntProp(name string) (int, error) {

	switch name {
	case "MyInt":
		return e.data.MyInt, nil

	}

	return 0, errors.New("No such Int prop: " + name)

}

func (e *__embeddedStructReader) SetIntProp(name string, value int) error {

	switch name {
	case "MyInt":
		e.data.MyInt = value
		return nil

	}

	return errors.New("No such Int prop: " + name)

}

func (e *__embeddedStructReader) IntSliceProp(name string) ([]int, error) {

	return []int{}, errors.New("No such IntSlice prop: " + name)

}

func (e *__embeddedStructReader) SetIntSliceProp(name string, value []int) error {

	return errors.New("No such IntSlice prop: " + name)

}

func (e *__embeddedStructReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	switch name {
	case "TargetPlayerIndex":
		return e.data.TargetPlayerIndex, nil

	}

	return 0, errors.New("No such PlayerIndex prop: " + name)

}

func (e *__embeddedStructReader) SetPlayerIndexProp(name string, value boardgame.PlayerIndex) error {

	switch name {
	case "TargetPlayerIndex":
		e.data.TargetPlayerIndex = value
		return nil

	}

	return errors.New("No such PlayerIndex prop: " + name)

}

func (e *__embeddedStructReader) PlayerIndexSliceProp(name string) ([]boardgame.PlayerIndex, error) {

	return []boardgame.PlayerIndex{}, errors.New("No such PlayerIndexSlice prop: " + name)

}

func (e *__embeddedStructReader) SetPlayerIndexSliceProp(name string, value []boardgame.PlayerIndex) error {

	return errors.New("No such PlayerIndexSlice prop: " + name)

}

func (e *__embeddedStructReader) StackProp(name string) (boardgame.Stack, error) {

	return nil, errors.New("No such Stack prop: " + name)

}

func (e *__embeddedStructReader) SetStackProp(name string, value boardgame.Stack) error {

	return errors.New("No such Stack prop: " + name)

}

func (e *__embeddedStructReader) StringProp(name string) (string, error) {

	return "", errors.New("No such String prop: " + name)

}

func (e *__embeddedStructReader) SetStringProp(name string, value string) error {

	return errors.New("No such String prop: " + name)

}

func (e *__embeddedStructReader) StringSliceProp(name string) ([]string, error) {

	return []string{}, errors.New("No such StringSlice prop: " + name)

}

func (e *__embeddedStructReader) SetStringSliceProp(name string, value []string) error {

	return errors.New("No such StringSlice prop: " + name)

}

func (e *__embeddedStructReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such Timer prop: " + name)

}

func (e *__embeddedStructReader) SetTimerProp(name string, value *boardgame.Timer) error {

	return errors.New("No such Timer prop: " + name)

}

func (e *embeddedStruct) Reader() boardgame.PropertyReader {
	return &__embeddedStructReader{e}
}

func (e *embeddedStruct) ReadSetter() boardgame.PropertyReadSetter {
	return &__embeddedStructReader{e}
}

// Implementation for doubleEmbeddedStruct

var __doubleEmbeddedStructReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyInt":             boardgame.TypeInt,
	"TargetPlayerIndex": boardgame.TypePlayerIndex,
}

type __doubleEmbeddedStructReader struct {
	data *doubleEmbeddedStruct
}

func (d *__doubleEmbeddedStructReader) Props() map[string]boardgame.PropertyType {
	return __doubleEmbeddedStructReaderProps
}

func (d *__doubleEmbeddedStructReader) Prop(name string) (interface{}, error) {
	props := d.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		return d.BoolProp(name)
	case boardgame.TypeBoolSlice:
		return d.BoolSliceProp(name)
	case boardgame.TypeEnumConst:
		return d.EnumConstProp(name)
	case boardgame.TypeEnumVar:
		return d.EnumVarProp(name)
	case boardgame.TypeInt:
		return d.IntProp(name)
	case boardgame.TypeIntSlice:
		return d.IntSliceProp(name)
	case boardgame.TypePlayerIndex:
		return d.PlayerIndexProp(name)
	case boardgame.TypePlayerIndexSlice:
		return d.PlayerIndexSliceProp(name)
	case boardgame.TypeStack:
		return d.StackProp(name)
	case boardgame.TypeString:
		return d.StringProp(name)
	case boardgame.TypeStringSlice:
		return d.StringSliceProp(name)
	case boardgame.TypeTimer:
		return d.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType.String())
}

func (d *__doubleEmbeddedStructReader) SetProp(name string, value interface{}) error {
	props := d.Props()
	propType, ok := props[name]

	if !ok {
		return errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		val, ok := value.(bool)
		if !ok {
			return errors.New("Provided value was not of type bool")
		}
		return d.SetBoolProp(name, val)
	case boardgame.TypeBoolSlice:
		val, ok := value.([]bool)
		if !ok {
			return errors.New("Provided value was not of type []bool")
		}
		return d.SetBoolSliceProp(name, val)
	case boardgame.TypeEnumConst:
		val, ok := value.(enum.Const)
		if !ok {
			return errors.New("Provided value was not of type enum.Const")
		}
		return d.SetEnumConstProp(name, val)
	case boardgame.TypeEnumVar:
		val, ok := value.(enum.Var)
		if !ok {
			return errors.New("Provided value was not of type enum.Var")
		}
		return d.SetEnumVarProp(name, val)
	case boardgame.TypeInt:
		val, ok := value.(int)
		if !ok {
			return errors.New("Provided value was not of type int")
		}
		return d.SetIntProp(name, val)
	case boardgame.TypeIntSlice:
		val, ok := value.([]int)
		if !ok {
			return errors.New("Provided value was not of type []int")
		}
		return d.SetIntSliceProp(name, val)
	case boardgame.TypePlayerIndex:
		val, ok := value.(boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type boardgame.PlayerIndex")
		}
		return d.SetPlayerIndexProp(name, val)
	case boardgame.TypePlayerIndexSlice:
		val, ok := value.([]boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type []boardgame.PlayerIndex")
		}
		return d.SetPlayerIndexSliceProp(name, val)
	case boardgame.TypeStack:
		val, ok := value.(boardgame.Stack)
		if !ok {
			return errors.New("Provided value was not of type boardgame.Stack")
		}
		return d.SetStackProp(name, val)
	case boardgame.TypeString:
		val, ok := value.(string)
		if !ok {
			return errors.New("Provided value was not of type string")
		}
		return d.SetStringProp(name, val)
	case boardgame.TypeStringSlice:
		val, ok := value.([]string)
		if !ok {
			return errors.New("Provided value was not of type []string")
		}
		return d.SetStringSliceProp(name, val)
	case boardgame.TypeTimer:
		val, ok := value.(*boardgame.Timer)
		if !ok {
			return errors.New("Provided value was not of type *boardgame.Timer")
		}
		return d.SetTimerProp(name, val)

	}

	return errors.New("Unexpected property type: " + propType.String())
}

func (d *__doubleEmbeddedStructReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such Bool prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetBoolProp(name string, value bool) error {

	return errors.New("No such Bool prop: " + name)

}

func (d *__doubleEmbeddedStructReader) BoolSliceProp(name string) ([]bool, error) {

	return []bool{}, errors.New("No such BoolSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetBoolSliceProp(name string, value []bool) error {

	return errors.New("No such BoolSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) EnumConstProp(name string) (enum.Const, error) {

	return nil, errors.New("No such EnumConst prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetEnumConstProp(name string, value enum.Const) error {

	return errors.New("No such EnumConst prop: " + name)

}

func (d *__doubleEmbeddedStructReader) EnumVarProp(name string) (enum.Var, error) {

	return nil, errors.New("No such EnumVar prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetEnumVarProp(name string, value enum.Var) error {

	return errors.New("No such EnumVar prop: " + name)

}

func (d *__doubleEmbeddedStructReader) IntProp(name string) (int, error) {

	switch name {
	case "MyInt":
		return d.data.MyInt, nil

	}

	return 0, errors.New("No such Int prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetIntProp(name string, value int) error {

	switch name {
	case "MyInt":
		d.data.MyInt = value
		return nil

	}

	return errors.New("No such Int prop: " + name)

}

func (d *__doubleEmbeddedStructReader) IntSliceProp(name string) ([]int, error) {

	return []int{}, errors.New("No such IntSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetIntSliceProp(name string, value []int) error {

	return errors.New("No such IntSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	switch name {
	case "TargetPlayerIndex":
		return d.data.TargetPlayerIndex, nil

	}

	return 0, errors.New("No such PlayerIndex prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetPlayerIndexProp(name string, value boardgame.PlayerIndex) error {

	switch name {
	case "TargetPlayerIndex":
		d.data.TargetPlayerIndex = value
		return nil

	}

	return errors.New("No such PlayerIndex prop: " + name)

}

func (d *__doubleEmbeddedStructReader) PlayerIndexSliceProp(name string) ([]boardgame.PlayerIndex, error) {

	return []boardgame.PlayerIndex{}, errors.New("No such PlayerIndexSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetPlayerIndexSliceProp(name string, value []boardgame.PlayerIndex) error {

	return errors.New("No such PlayerIndexSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) StackProp(name string) (boardgame.Stack, error) {

	return nil, errors.New("No such Stack prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetStackProp(name string, value boardgame.Stack) error {

	return errors.New("No such Stack prop: " + name)

}

func (d *__doubleEmbeddedStructReader) StringProp(name string) (string, error) {

	return "", errors.New("No such String prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetStringProp(name string, value string) error {

	return errors.New("No such String prop: " + name)

}

func (d *__doubleEmbeddedStructReader) StringSliceProp(name string) ([]string, error) {

	return []string{}, errors.New("No such StringSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetStringSliceProp(name string, value []string) error {

	return errors.New("No such StringSlice prop: " + name)

}

func (d *__doubleEmbeddedStructReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such Timer prop: " + name)

}

func (d *__doubleEmbeddedStructReader) SetTimerProp(name string, value *boardgame.Timer) error {

	return errors.New("No such Timer prop: " + name)

}

func (d *doubleEmbeddedStruct) Reader() boardgame.PropertyReader {
	return &__doubleEmbeddedStructReader{d}
}

func (d *doubleEmbeddedStruct) ReadSetter() boardgame.PropertyReadSetter {
	return &__doubleEmbeddedStructReader{d}
}

// Implementation for myOtherStruct

var __myOtherStructReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyGrowableStack": boardgame.TypeStack,
	"ThePlayerIndex":  boardgame.TypePlayerIndex,
}

type __myOtherStructReader struct {
	data *myOtherStruct
}

func (m *__myOtherStructReader) Props() map[string]boardgame.PropertyType {
	return __myOtherStructReaderProps
}

func (m *__myOtherStructReader) Prop(name string) (interface{}, error) {
	props := m.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		return m.BoolProp(name)
	case boardgame.TypeBoolSlice:
		return m.BoolSliceProp(name)
	case boardgame.TypeEnumConst:
		return m.EnumConstProp(name)
	case boardgame.TypeEnumVar:
		return m.EnumVarProp(name)
	case boardgame.TypeInt:
		return m.IntProp(name)
	case boardgame.TypeIntSlice:
		return m.IntSliceProp(name)
	case boardgame.TypePlayerIndex:
		return m.PlayerIndexProp(name)
	case boardgame.TypePlayerIndexSlice:
		return m.PlayerIndexSliceProp(name)
	case boardgame.TypeStack:
		return m.StackProp(name)
	case boardgame.TypeString:
		return m.StringProp(name)
	case boardgame.TypeStringSlice:
		return m.StringSliceProp(name)
	case boardgame.TypeTimer:
		return m.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType.String())
}

func (m *__myOtherStructReader) SetProp(name string, value interface{}) error {
	props := m.Props()
	propType, ok := props[name]

	if !ok {
		return errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		val, ok := value.(bool)
		if !ok {
			return errors.New("Provided value was not of type bool")
		}
		return m.SetBoolProp(name, val)
	case boardgame.TypeBoolSlice:
		val, ok := value.([]bool)
		if !ok {
			return errors.New("Provided value was not of type []bool")
		}
		return m.SetBoolSliceProp(name, val)
	case boardgame.TypeEnumConst:
		val, ok := value.(enum.Const)
		if !ok {
			return errors.New("Provided value was not of type enum.Const")
		}
		return m.SetEnumConstProp(name, val)
	case boardgame.TypeEnumVar:
		val, ok := value.(enum.Var)
		if !ok {
			return errors.New("Provided value was not of type enum.Var")
		}
		return m.SetEnumVarProp(name, val)
	case boardgame.TypeInt:
		val, ok := value.(int)
		if !ok {
			return errors.New("Provided value was not of type int")
		}
		return m.SetIntProp(name, val)
	case boardgame.TypeIntSlice:
		val, ok := value.([]int)
		if !ok {
			return errors.New("Provided value was not of type []int")
		}
		return m.SetIntSliceProp(name, val)
	case boardgame.TypePlayerIndex:
		val, ok := value.(boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type boardgame.PlayerIndex")
		}
		return m.SetPlayerIndexProp(name, val)
	case boardgame.TypePlayerIndexSlice:
		val, ok := value.([]boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type []boardgame.PlayerIndex")
		}
		return m.SetPlayerIndexSliceProp(name, val)
	case boardgame.TypeStack:
		val, ok := value.(boardgame.Stack)
		if !ok {
			return errors.New("Provided value was not of type boardgame.Stack")
		}
		return m.SetStackProp(name, val)
	case boardgame.TypeString:
		val, ok := value.(string)
		if !ok {
			return errors.New("Provided value was not of type string")
		}
		return m.SetStringProp(name, val)
	case boardgame.TypeStringSlice:
		val, ok := value.([]string)
		if !ok {
			return errors.New("Provided value was not of type []string")
		}
		return m.SetStringSliceProp(name, val)
	case boardgame.TypeTimer:
		val, ok := value.(*boardgame.Timer)
		if !ok {
			return errors.New("Provided value was not of type *boardgame.Timer")
		}
		return m.SetTimerProp(name, val)

	}

	return errors.New("Unexpected property type: " + propType.String())
}

func (m *__myOtherStructReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such Bool prop: " + name)

}

func (m *__myOtherStructReader) SetBoolProp(name string, value bool) error {

	return errors.New("No such Bool prop: " + name)

}

func (m *__myOtherStructReader) BoolSliceProp(name string) ([]bool, error) {

	return []bool{}, errors.New("No such BoolSlice prop: " + name)

}

func (m *__myOtherStructReader) SetBoolSliceProp(name string, value []bool) error {

	return errors.New("No such BoolSlice prop: " + name)

}

func (m *__myOtherStructReader) EnumConstProp(name string) (enum.Const, error) {

	return nil, errors.New("No such EnumConst prop: " + name)

}

func (m *__myOtherStructReader) SetEnumConstProp(name string, value enum.Const) error {

	return errors.New("No such EnumConst prop: " + name)

}

func (m *__myOtherStructReader) EnumVarProp(name string) (enum.Var, error) {

	return nil, errors.New("No such EnumVar prop: " + name)

}

func (m *__myOtherStructReader) SetEnumVarProp(name string, value enum.Var) error {

	return errors.New("No such EnumVar prop: " + name)

}

func (m *__myOtherStructReader) IntProp(name string) (int, error) {

	return 0, errors.New("No such Int prop: " + name)

}

func (m *__myOtherStructReader) SetIntProp(name string, value int) error {

	return errors.New("No such Int prop: " + name)

}

func (m *__myOtherStructReader) IntSliceProp(name string) ([]int, error) {

	return []int{}, errors.New("No such IntSlice prop: " + name)

}

func (m *__myOtherStructReader) SetIntSliceProp(name string, value []int) error {

	return errors.New("No such IntSlice prop: " + name)

}

func (m *__myOtherStructReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	switch name {
	case "ThePlayerIndex":
		return m.data.ThePlayerIndex, nil

	}

	return 0, errors.New("No such PlayerIndex prop: " + name)

}

func (m *__myOtherStructReader) SetPlayerIndexProp(name string, value boardgame.PlayerIndex) error {

	switch name {
	case "ThePlayerIndex":
		m.data.ThePlayerIndex = value
		return nil

	}

	return errors.New("No such PlayerIndex prop: " + name)

}

func (m *__myOtherStructReader) PlayerIndexSliceProp(name string) ([]boardgame.PlayerIndex, error) {

	return []boardgame.PlayerIndex{}, errors.New("No such PlayerIndexSlice prop: " + name)

}

func (m *__myOtherStructReader) SetPlayerIndexSliceProp(name string, value []boardgame.PlayerIndex) error {

	return errors.New("No such PlayerIndexSlice prop: " + name)

}

func (m *__myOtherStructReader) StackProp(name string) (boardgame.Stack, error) {

	switch name {
	case "MyGrowableStack":
		return m.data.MyGrowableStack, nil

	}

	return nil, errors.New("No such Stack prop: " + name)

}

func (m *__myOtherStructReader) SetStackProp(name string, value boardgame.Stack) error {

	switch name {
	case "MyGrowableStack":
		m.data.MyGrowableStack = value
		return nil

	}

	return errors.New("No such Stack prop: " + name)

}

func (m *__myOtherStructReader) StringProp(name string) (string, error) {

	return "", errors.New("No such String prop: " + name)

}

func (m *__myOtherStructReader) SetStringProp(name string, value string) error {

	return errors.New("No such String prop: " + name)

}

func (m *__myOtherStructReader) StringSliceProp(name string) ([]string, error) {

	return []string{}, errors.New("No such StringSlice prop: " + name)

}

func (m *__myOtherStructReader) SetStringSliceProp(name string, value []string) error {

	return errors.New("No such StringSlice prop: " + name)

}

func (m *__myOtherStructReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such Timer prop: " + name)

}

func (m *__myOtherStructReader) SetTimerProp(name string, value *boardgame.Timer) error {

	return errors.New("No such Timer prop: " + name)

}

func (m *myOtherStruct) Reader() boardgame.PropertyReader {
	return &__myOtherStructReader{m}
}

func (m *myOtherStruct) ReadSetter() boardgame.PropertyReadSetter {
	return &__myOtherStructReader{m}
}

// Implementation for onlyReader

var __onlyReaderReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyString": boardgame.TypeString,
}

type __onlyReaderReader struct {
	data *onlyReader
}

func (o *__onlyReaderReader) Props() map[string]boardgame.PropertyType {
	return __onlyReaderReaderProps
}

func (o *__onlyReaderReader) Prop(name string) (interface{}, error) {
	props := o.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		return o.BoolProp(name)
	case boardgame.TypeBoolSlice:
		return o.BoolSliceProp(name)
	case boardgame.TypeEnumConst:
		return o.EnumConstProp(name)
	case boardgame.TypeEnumVar:
		return o.EnumVarProp(name)
	case boardgame.TypeInt:
		return o.IntProp(name)
	case boardgame.TypeIntSlice:
		return o.IntSliceProp(name)
	case boardgame.TypePlayerIndex:
		return o.PlayerIndexProp(name)
	case boardgame.TypePlayerIndexSlice:
		return o.PlayerIndexSliceProp(name)
	case boardgame.TypeStack:
		return o.StackProp(name)
	case boardgame.TypeString:
		return o.StringProp(name)
	case boardgame.TypeStringSlice:
		return o.StringSliceProp(name)
	case boardgame.TypeTimer:
		return o.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType.String())
}

func (o *__onlyReaderReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such Bool prop: " + name)

}

func (o *__onlyReaderReader) BoolSliceProp(name string) ([]bool, error) {

	return []bool{}, errors.New("No such BoolSlice prop: " + name)

}

func (o *__onlyReaderReader) EnumConstProp(name string) (enum.Const, error) {

	return nil, errors.New("No such EnumConst prop: " + name)

}

func (o *__onlyReaderReader) EnumVarProp(name string) (enum.Var, error) {

	return nil, errors.New("No such EnumVar prop: " + name)

}

func (o *__onlyReaderReader) IntProp(name string) (int, error) {

	return 0, errors.New("No such Int prop: " + name)

}

func (o *__onlyReaderReader) IntSliceProp(name string) ([]int, error) {

	return []int{}, errors.New("No such IntSlice prop: " + name)

}

func (o *__onlyReaderReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	return 0, errors.New("No such PlayerIndex prop: " + name)

}

func (o *__onlyReaderReader) PlayerIndexSliceProp(name string) ([]boardgame.PlayerIndex, error) {

	return []boardgame.PlayerIndex{}, errors.New("No such PlayerIndexSlice prop: " + name)

}

func (o *__onlyReaderReader) StackProp(name string) (boardgame.Stack, error) {

	return nil, errors.New("No such Stack prop: " + name)

}

func (o *__onlyReaderReader) StringProp(name string) (string, error) {

	switch name {
	case "MyString":
		return o.data.MyString, nil

	}

	return "", errors.New("No such String prop: " + name)

}

func (o *__onlyReaderReader) StringSliceProp(name string) ([]string, error) {

	return []string{}, errors.New("No such StringSlice prop: " + name)

}

func (o *__onlyReaderReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such Timer prop: " + name)

}

func (o *onlyReader) Reader() boardgame.PropertyReader {
	return &__onlyReaderReader{o}
}

// Implementation for onlyReadSetter

var __onlyReadSetterReaderProps map[string]boardgame.PropertyType = map[string]boardgame.PropertyType{
	"MyInt": boardgame.TypeInt,
}

type __onlyReadSetterReader struct {
	data *onlyReadSetter
}

func (o *__onlyReadSetterReader) Props() map[string]boardgame.PropertyType {
	return __onlyReadSetterReaderProps
}

func (o *__onlyReadSetterReader) Prop(name string) (interface{}, error) {
	props := o.Props()
	propType, ok := props[name]

	if !ok {
		return nil, errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		return o.BoolProp(name)
	case boardgame.TypeBoolSlice:
		return o.BoolSliceProp(name)
	case boardgame.TypeEnumConst:
		return o.EnumConstProp(name)
	case boardgame.TypeEnumVar:
		return o.EnumVarProp(name)
	case boardgame.TypeInt:
		return o.IntProp(name)
	case boardgame.TypeIntSlice:
		return o.IntSliceProp(name)
	case boardgame.TypePlayerIndex:
		return o.PlayerIndexProp(name)
	case boardgame.TypePlayerIndexSlice:
		return o.PlayerIndexSliceProp(name)
	case boardgame.TypeStack:
		return o.StackProp(name)
	case boardgame.TypeString:
		return o.StringProp(name)
	case boardgame.TypeStringSlice:
		return o.StringSliceProp(name)
	case boardgame.TypeTimer:
		return o.TimerProp(name)

	}

	return nil, errors.New("Unexpected property type: " + propType.String())
}

func (o *__onlyReadSetterReader) SetProp(name string, value interface{}) error {
	props := o.Props()
	propType, ok := props[name]

	if !ok {
		return errors.New("No such property with that name: " + name)
	}

	switch propType {
	case boardgame.TypeBool:
		val, ok := value.(bool)
		if !ok {
			return errors.New("Provided value was not of type bool")
		}
		return o.SetBoolProp(name, val)
	case boardgame.TypeBoolSlice:
		val, ok := value.([]bool)
		if !ok {
			return errors.New("Provided value was not of type []bool")
		}
		return o.SetBoolSliceProp(name, val)
	case boardgame.TypeEnumConst:
		val, ok := value.(enum.Const)
		if !ok {
			return errors.New("Provided value was not of type enum.Const")
		}
		return o.SetEnumConstProp(name, val)
	case boardgame.TypeEnumVar:
		val, ok := value.(enum.Var)
		if !ok {
			return errors.New("Provided value was not of type enum.Var")
		}
		return o.SetEnumVarProp(name, val)
	case boardgame.TypeInt:
		val, ok := value.(int)
		if !ok {
			return errors.New("Provided value was not of type int")
		}
		return o.SetIntProp(name, val)
	case boardgame.TypeIntSlice:
		val, ok := value.([]int)
		if !ok {
			return errors.New("Provided value was not of type []int")
		}
		return o.SetIntSliceProp(name, val)
	case boardgame.TypePlayerIndex:
		val, ok := value.(boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type boardgame.PlayerIndex")
		}
		return o.SetPlayerIndexProp(name, val)
	case boardgame.TypePlayerIndexSlice:
		val, ok := value.([]boardgame.PlayerIndex)
		if !ok {
			return errors.New("Provided value was not of type []boardgame.PlayerIndex")
		}
		return o.SetPlayerIndexSliceProp(name, val)
	case boardgame.TypeStack:
		val, ok := value.(boardgame.Stack)
		if !ok {
			return errors.New("Provided value was not of type boardgame.Stack")
		}
		return o.SetStackProp(name, val)
	case boardgame.TypeString:
		val, ok := value.(string)
		if !ok {
			return errors.New("Provided value was not of type string")
		}
		return o.SetStringProp(name, val)
	case boardgame.TypeStringSlice:
		val, ok := value.([]string)
		if !ok {
			return errors.New("Provided value was not of type []string")
		}
		return o.SetStringSliceProp(name, val)
	case boardgame.TypeTimer:
		val, ok := value.(*boardgame.Timer)
		if !ok {
			return errors.New("Provided value was not of type *boardgame.Timer")
		}
		return o.SetTimerProp(name, val)

	}

	return errors.New("Unexpected property type: " + propType.String())
}

func (o *__onlyReadSetterReader) BoolProp(name string) (bool, error) {

	return false, errors.New("No such Bool prop: " + name)

}

func (o *__onlyReadSetterReader) SetBoolProp(name string, value bool) error {

	return errors.New("No such Bool prop: " + name)

}

func (o *__onlyReadSetterReader) BoolSliceProp(name string) ([]bool, error) {

	return []bool{}, errors.New("No such BoolSlice prop: " + name)

}

func (o *__onlyReadSetterReader) SetBoolSliceProp(name string, value []bool) error {

	return errors.New("No such BoolSlice prop: " + name)

}

func (o *__onlyReadSetterReader) EnumConstProp(name string) (enum.Const, error) {

	return nil, errors.New("No such EnumConst prop: " + name)

}

func (o *__onlyReadSetterReader) SetEnumConstProp(name string, value enum.Const) error {

	return errors.New("No such EnumConst prop: " + name)

}

func (o *__onlyReadSetterReader) EnumVarProp(name string) (enum.Var, error) {

	return nil, errors.New("No such EnumVar prop: " + name)

}

func (o *__onlyReadSetterReader) SetEnumVarProp(name string, value enum.Var) error {

	return errors.New("No such EnumVar prop: " + name)

}

func (o *__onlyReadSetterReader) IntProp(name string) (int, error) {

	switch name {
	case "MyInt":
		return o.data.MyInt, nil

	}

	return 0, errors.New("No such Int prop: " + name)

}

func (o *__onlyReadSetterReader) SetIntProp(name string, value int) error {

	switch name {
	case "MyInt":
		o.data.MyInt = value
		return nil

	}

	return errors.New("No such Int prop: " + name)

}

func (o *__onlyReadSetterReader) IntSliceProp(name string) ([]int, error) {

	return []int{}, errors.New("No such IntSlice prop: " + name)

}

func (o *__onlyReadSetterReader) SetIntSliceProp(name string, value []int) error {

	return errors.New("No such IntSlice prop: " + name)

}

func (o *__onlyReadSetterReader) PlayerIndexProp(name string) (boardgame.PlayerIndex, error) {

	return 0, errors.New("No such PlayerIndex prop: " + name)

}

func (o *__onlyReadSetterReader) SetPlayerIndexProp(name string, value boardgame.PlayerIndex) error {

	return errors.New("No such PlayerIndex prop: " + name)

}

func (o *__onlyReadSetterReader) PlayerIndexSliceProp(name string) ([]boardgame.PlayerIndex, error) {

	return []boardgame.PlayerIndex{}, errors.New("No such PlayerIndexSlice prop: " + name)

}

func (o *__onlyReadSetterReader) SetPlayerIndexSliceProp(name string, value []boardgame.PlayerIndex) error {

	return errors.New("No such PlayerIndexSlice prop: " + name)

}

func (o *__onlyReadSetterReader) StackProp(name string) (boardgame.Stack, error) {

	return nil, errors.New("No such Stack prop: " + name)

}

func (o *__onlyReadSetterReader) SetStackProp(name string, value boardgame.Stack) error {

	return errors.New("No such Stack prop: " + name)

}

func (o *__onlyReadSetterReader) StringProp(name string) (string, error) {

	return "", errors.New("No such String prop: " + name)

}

func (o *__onlyReadSetterReader) SetStringProp(name string, value string) error {

	return errors.New("No such String prop: " + name)

}

func (o *__onlyReadSetterReader) StringSliceProp(name string) ([]string, error) {

	return []string{}, errors.New("No such StringSlice prop: " + name)

}

func (o *__onlyReadSetterReader) SetStringSliceProp(name string, value []string) error {

	return errors.New("No such StringSlice prop: " + name)

}

func (o *__onlyReadSetterReader) TimerProp(name string) (*boardgame.Timer, error) {

	return nil, errors.New("No such Timer prop: " + name)

}

func (o *__onlyReadSetterReader) SetTimerProp(name string, value *boardgame.Timer) error {

	return errors.New("No such Timer prop: " + name)

}

func (o *onlyReadSetter) ReadSetter() boardgame.PropertyReadSetter {
	return &__onlyReadSetterReader{o}
}

