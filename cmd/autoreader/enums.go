package main

import (
	"errors"
	"github.com/MarcGrol/golangAnnotations/model"
	"github.com/abcum/lcp"
	"strings"
	"text/template"
)

var enumHeaderTemplate *template.Template
var enumItemTemplate *template.Template

func init() {

	enumHeaderTemplate = template.Must(template.New("enumheader").Parse(enumHeaderTemplateText))
	enumItemTemplate = template.Must(template.New("enumitem").Parse(enumItemTemplateText))

}

func processEnums(sources model.ParsedSources) (enumOutput string, err error) {

	for _, enum := range sources.Enums {

		if !enumConfig(enum.DocLines) {
			continue
		}

		if enumOutput == "" {
			enumOutput = enumHeaderForPackage(enum.PackageName)
		}

		var literals [][]byte

		for _, literal := range enum.EnumLiterals {
			if !fieldNamePublic(literal.Name) {
				continue
			}
			literals = append(literals, []byte(literal.Name))
		}

		if len(literals) == 0 {
			return "", errors.New("No public literals in enum")
		}

		prefix := string(lcp.LCP(literals...))

		if len(prefix) == 0 {
			return "", errors.New("Enum with autoreader configured didn't have a common prefix.")
		}

		keys := make([]string, len(literals))

		i := 0

		for _, literal := range enum.EnumLiterals {
			if !strings.HasPrefix(literal.Name, prefix) {
				return "", errors.New("enum literal didn't have prefix we thought it did")
			}
			keys[i] = strings.Replace(literal.Name, prefix, "", -1)
			i++
		}

		enumOutput += enumItem(prefix, keys)

	}

	return enumOutput, nil

}

func enumConfig(docLines []string) bool {

	for _, docLine := range docLines {
		docLine = strings.ToLower(docLine)
		docLine = strings.TrimPrefix(docLine, "//")
		docLine = strings.TrimSpace(docLine)
		if strings.HasPrefix(docLine, magicDocLinePrefix) {
			return true
		}
	}

	return false
}

func enumHeaderForPackage(packageName string) string {
	return templateOutput(enumHeaderTemplate, map[string]string{
		"packageName": packageName,
	})
}

func enumItem(prefix string, keys []string) string {
	return templateOutput(enumItemTemplate, map[string]interface{}{
		"prefix": prefix,
		"keys":   keys,
	})
}

const enumHeaderTemplateText = `/************************************
 *
 * This file contains auto-generated methods to help configure enums. 
 * It was generated by autoreader.
 *
 * DO NOT EDIT by hand.
 *
 ************************************/

package {{.packageName}}

import (
	"github.com/jkomoros/boardgame/enum"
)

var Enums = enum.NewSet()

`

const enumItemTemplateText = `var {{.prefix}}Enum = enums.MustAdd("{{.prefix}}", map[int]string{
	{{$prefix := .prefix}}
	{{range .keys -}}
	"{{.}}": {{$prefix}}{{.}}
	{{- end}}
})

`
